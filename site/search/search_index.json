{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Getting Started","text":""},{"location":"#installing-the-plugin","title":"Installing the Plugin","text":"<ul> <li>IntelliJ IDEA --&gt; Preferences --&gt; Plugins --&gt; Marketplace</li> <li>Search for Unlogged in the marketplace &amp; Install</li> </ul>"},{"location":"#adding-the-dependency","title":"Adding the dependency","text":"mavengradle <pre><code>&lt;dependency&gt;\n&lt;artifactId&gt;unlogged-sdk&lt;/artifactId&gt;\n&lt;groupId&gt;video.bug&lt;/groupId&gt;\n&lt;version&gt;0.1.12&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre> <pre><code>dependencies\n{\nimplementation 'video.bug:unlogged-sdk:0.1.12'\nannotationProcessor 'video.bug:unlogged-sdk:0.1.12'\n}\n</code></pre>"},{"location":"#adding-the-annotion","title":"Adding the annotion","text":"<p>To start recording method input and return values - add <code>@Unlogged</code> annoation just above your main method.</p> <p>Here is an example.</p> <pre><code>   @Unlogged\npublic static void main(String[] args) {\nSpringApplication.run(JwtDemoApplication.class, args);\n}\n</code></pre>"},{"location":"#clean-and-debug","title":"Clean, and Debug!","text":"mavengradle <pre><code>mvn clean\n</code></pre> <pre><code>gradle clean\n</code></pre> <p>Start your application in debug mode to call any java function directly.</p> <p>Here is a sample method <code>samplemethod()</code> you can call using <code>Direct Invoke</code></p> <p>Warning</p> <p>Do not call your <code>main</code> method using <code>Direct Invoke</code></p>"},{"location":"0-Guttor/","title":"Guttor Icon States","text":"<p>Once you install Unlogged, for each method in your code base, you will see different guttor icons. The code, record, replay lifecycle revolves around these 6 gutter icons. </p> <p>Here are different gutter icons and what they mean</p> <p>Application Not Running with Unlogged</p> <p>This icon means that your application is not running with Unlogged. You can add the Unlogged dependency in your pom.xml or build.gradle, mvn clean or gradle clean and start debugging your application.</p> <p>Check Getting Started section to know how to add the dependency.</p> <p>Application Running with Unlogged</p> <p>Once you see this icon, it means that your application is running with Unlogged. Now, you can invoke any method inside your Java code using Direct Invoke or call http end points using Postman, Swagger or UI.</p> <p>Use Postman, Swagger in case you are accessing these methods through http end points. You can even use your UI to send data to your application. </p> <p>You can use <code>Direct Invoke</code> inside the plugin to call any Java method directly. This will save you a lot of time in debugging deep within your code. You can start debugging your methods right where it matters.</p> <p>Recording Available for methods</p> <p>Once you execute a method, using either Direct Invoke, Postman, or Swagger, you will see this icon. It indicates that Unlogged has recorded input and return values for the method. </p> <p>Click on the icon and you can check the recorded data</p> <p></p> <p>Execute Method</p> <p>If you make code changes after a recording is done for a method, you will see a bolt icon. That means you can now hot-relaod the code changes within this method and replay its previously recorded inputs.</p> <p>Note the code changes in getWeatherinfo in the above vs below code snippet.</p> <p></p> <p>Passing Case</p> <p>After your code changes, and once you execute the method, this icon tells you if the return value is same as before. </p> <p></p> <p>Failing Case</p> <p>After your code changes, and once you execute the method, this icon tells you if the return value is different from before. </p> <p></p>"},{"location":"1-Assertions/","title":"Saving Candidates","text":""},{"location":"1-Assertions/#whats-a-candidate","title":"What's a Candidate?","text":"<p>When you execute a method using <code>Direct Invoke</code> or through an http endpoint, you will see the method input values that can be replayed. </p> <p>Each unique combination of input and return value is called a Candidate.</p> <p>Tip</p> <p>By default, when you replay a candidate, Unlogged compares the return value object down to the key level. </p> <p>But return value may contain ever changing or irrelevant fields such as timestamp. That's where Assertions come in picture.</p>"},{"location":"1-Assertions/#defining-assertions","title":"Defining Assertions","text":"<p>When you click on Save Replay - you will see a window that presents the recorded value of the object for the candidate we just replayed.  </p> <p>You can define any assertion on this return value, down to any key/value pair.</p>"},{"location":"1-Assertions/#saving-the-replays","title":"Saving the Replays","text":"<p>Replays with assertions are saved at the below location</p> <p><code>/YOUR PROJECT DIRECTORY/src/test/resources/unlogged</code></p> <p>Replaying with Assertions</p> <p>For your code change, when you replay the candidate, Unlogged will execute the assertion you just saved and inform if the candidate passes or fails the assertions.</p>"},{"location":"1-Assertions/#collaborate","title":"Collaborate","text":"<p>You can now push these replays to your git repository, so that your team members can pull and replay locally for their code changes.</p>"},{"location":"2-Mocking/","title":"Mocking","text":"<p>This feature is coming soon!</p> <p>Unlogged will automatically mock external API calls, DB calls or downstream service calls, so that you can test your code changes in isolation.</p> <p>You will be able to turn mocking on and off so that you can test your code changes in integrated fashion.</p>"},{"location":"3-Coverage/","title":"Code Coverage","text":"<p>Getting code coverage number above 90% is often challenging and takes a lot of time and effort. </p> <p>Unlogged highlights the lines of code executed and offers you the feedback on code coverage. </p>"},{"location":"3-Coverage/#tracking","title":"Tracking","text":"<p>The code coverage won't increase unless you save the candidates with assertions. Check the potential uptick in the coverage number on the replay window.</p> <p>You can check the progress in the tab <code>Code Coverage</code> every time you save different candidates.</p> <p>Track class coverage, method coverage, and line coverage in this tab.</p> <p>Tip</p> <p>The code coverage is shown even when you use external tools such as Postman, or Swagger to execute a method through an http end point.</p>"}]}